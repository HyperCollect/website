services:
    app:
     build:
       args:
         user: isis
         uid: 1000
       context: ./
       dockerfile: Dockerfile
     image: hgraph
     container_name: hgraph
     restart: unless-stopped
     ports:
       - "8000:8000"
     working_dir: /var/www/
     volumes:
       - ./:/var/www
     networks:
       - sail
     depends_on:
       - postgres
    jupyter-lite:
      build:
        context: .
        dockerfile: ./docker/jupyterlite/Dockerfile
      container_name: jupyterlite-server
      restart: unless-stopped
      volumes:
        - ./jupyterlite:/app
      ports:
        - 8080:8000
      networks:
        - sail
    nginx:
      image: nginx:1.25-alpine
      container_name: hgraph-nginx
      restart: unless-stopped
      ports:
        - 80:80
        - 443:443
      volumes:
        - ./:/var/www
        - ./docker/nginx:/etc/nginx/conf.d
        - ./certbot/www/:/var/www/certbot/:ro
        - ./certbot/conf/:/etc/nginx/ssl/:ro
      networks:
        - sail
    certbot:
      image: certbot/certbot:latest
      volumes:
        - ./certbot/www/:/var/www/certbot/:rw
        - ./certbot/conf/:/etc/letsencrypt/:rw
    postgres:
      image: postgres
      restart: unless-stopped
      ports:
        - '${FORWARD_DB_PORT:-5432}:5432'
      environment:
        POSTGRES_DB: '${DB_DATABASE}'
        POSTGRES_USER: '${DB_USERNAME}'
        POSTGRES_PASSWORD: '${DB_PASSWORD}'
      volumes:
        - sail-postgres:/var/lib/postgresql/data
        - ./docker/psql/:/docker-entrypoint-initdb.d
      networks:
        - sail
networks:
    sail:
        driver: bridge
volumes:
    sail-postgres:
        driver: local
